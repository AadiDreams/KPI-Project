<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Reports - Security Head</title>
    <link rel="stylesheet" href="/css/incident-report.css">
    <link rel="stylesheet" href="/css/styles.css">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="js/security-head.js" defer></script>
    <link rel="icon" type="image/png" href="/images/IRIS.png">

    <style>
        .tabs {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
        }

        .tab {
            padding: 10px 20px;
            background-color: #fff;
            border: 1px solid #b30000;
            color: #b30000;
            cursor: pointer;
            border-radius: 5px;
            transition: all 0.3s ease;
        }

        .tab.active {
            background-color: #b30000;
            color: #fff;
        }

        .reports-list {
            list-style: none;
            padding: 0;
            margin: 0;
        }

        .report-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 10px 20px;
            background-color: #fff;
            border: 1px solid #ccc;
            border-radius: 5px;
            margin-bottom: 10px;
            transition: all 0.3s ease;
        }

        .report-item:hover {
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }

        .report-buttons {
            display: flex;
            gap: 10px;
        }

        .btn {
            padding: 5px 10px;
            color: #fff;
            background-color: #b30000;
            border: none;
            border-radius: 3px;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }

        .btn:hover {
            background-color: #cc0000;
        }

        .dropdown-container {
            position: relative;
            width: 300px;
        }

        .dropdown-button {
            width: 100%;
            padding: 10px;
            border: 1px solid #b30000;
            background-color: #FAF3F0;
            cursor: pointer;
            text-align: left;
            border-radius: 5px;
        }

        .dropdown-button:after {
            content: 'â–¼';
            float: right;
            margin-top: 3px;
        }

        .dropdown-list {
            position: absolute;
            width: 100%;
            max-height: 200px;
            overflow-y: auto;
            background: #fff;
            border: 1px solid #b30000;
            border-radius: 5px;
            margin-top: 5px;
            display: none;
            z-index: 1000;
        }

        .dropdown-item {
            padding: 8px 10px;
            background-color: #FAF3F0;
            cursor: pointer;
            border-bottom: 1px solid #eee;
        }

        .dropdown-item:hover {
            background-color: #FAF3F0;
        }

        .dropdown-item.selected {
            background-color: #ffcccc;
        }

        .dropdown-item:last-child {
            border-bottom: none;
        }

        .selected-departments {
            display: flex;
            flex-wrap: wrap;
            margin-top: 10px;
        }

        .selected-department {
            margin: 5px;
            padding: 5px 10px;
            background-color: #ffcccc;
            color: #000;
            border-radius: 5px;
            font-size: 14px;
        }

        .selected-department span {
            margin-left: 10px;
            color: #999;
            cursor: pointer;
        }


/*         


           fieldset {
            border: none;
            margin-bottom: 2rem;
        }

        legend {
            font-size: 1.25rem;
            margin-bottom: 1rem;
            font-weight: bold;
            color: #2d3748;
        }
        /* General styles for input, textarea, and select */
input, textarea, select {
    width: 100%;
    padding: 10px;
    margin: 8px 0;
    display: block;
    border: 1px solid #b30000;
    border-radius: 8px;
    font-size: 16px;
    font-family: Arial, sans-serif;
    box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
    transition: all 0.3s ease;
}

/* Focus effect */
input:focus, textarea:focus, select:focus {
    border-color: hsl(1, 88%, 30%);
    box-shadow: 0px 0px 8px rgba(230, 17, 34, 0.616);
    outline: none;
}

/* Style for input[type="file"] */
input[type="file"] {
    border: none;
    padding: 5px;
    font-size: 16px;
}

/* Style for the remove buttons */
button.remove-button {
    background-color: #e74c3c;
    color: white;
    border: none;
    padding: 8px 12px;
    border-radius: 8px;
    cursor: pointer;
    font-size: 14px;
    transition: background-color 0.3s ease;
}

button.remove-button:hover {
    background-color: #c0392b;
}

/* Add buttons */
button {
    background-color: #28a745;
    color: white;
    border: none;
    padding: 10px 15px;
    border-radius: 8px;
    font-size: 14px;
    cursor: pointer;
    transition: background-color 0.3s ease;
}

button:hover {
    background-color: #218838;
} */
    </style>
</head>
<body>
    <%- include('partials/sidebar', { active: 'investigation' }) %>
        <!-- Main Content -->
        <main class="main-content">
            <div class="top-bar">
                <div class="profile">
                    <span>Welcome,<%=name%></span>
                    <div class="profile-icon">ðŸ‘¤</div>
                </div>
                <div class="notification">
                    <span>ðŸ””</span>
                </div>
            </div>

            <div class="content-area">
                <h1 style="color: #b30000;">Safety Investigation Report</h1>
        <form action="/submit-investigation" method="post">
            <fieldset>
                <legend>Details of Occurrence</legend>
                <table border="1" id="details-of-occurence">
                    <tr>
                        <td>Date & Time of Incident(IST)</td>
                        <td><input type="datetime-local"  id="date-time" name="date-time" required></td>
                    </tr>

                    <tr>
                        <td>Name of Airport</td>
                        <td><input type="text" id="name-of-airport" name="name-of-airport" value="Kannur International Airport (KIAL)" required></td>                    </tr>

                    <tr>
                        <td>Location of Incident</td>
                        <td><input type="text" id="location-of-incident" name="location-of-incident" required></td>
                    </tr>

                    <tr>
                        <td>Type of Operation</td>
                        <td><input type="text" id="type-of-operation" name="type-of-operation" required></td>
                    </tr>
                </table>
                
            </fieldset>
            <fieldset>
                <legend>UID Number</legend>
        
                <select name="uid-number" id="uid-number" required>
                    <option value="" selected>Select UID Number</option>
                    <option value="Incident1">Incident1</option>
                    <option value="Incident2">Incident2</option>
                    <option value="Incident3">Incident3</option>
                    <option value="Other">Other</option>
                </select><br><br>
            </fieldset>
            <fieldset>
                <legend>Details of Aircraft Involved, if applicable</legend>
                <table border="1" id="details-of-aircraft-involved">
                    <tr>
                        <td>Name of Airline/Operator</td>
                        <td><input type="text" id="airline" name="airline-operator"></td>
                    </tr>

                    <tr>
                        <td>Aircraft Type</td>
                        <td><input type="text" id="aircraft-type" name="aircraft-type"></td>
                    </tr>

                    <tr>
                        <td>Registration no.</td>
                        <td><input type="text" id="registration-no" name="registration-no"></td>
                    </tr>

                    <tr>
                        <td>Flight No.</td>
                        <td><input type="text" id="flight-no" name="flight-no"></td>
                    </tr>
                    
                    <tr>
                        <td>Sector</td>
                        <td><input type="text" id="sector" name="sector"></td>
                    </tr>

                    <tr>
                        <td>Phase of Operation</td>
                        <td><input type="text" id="phase-of-operation-aircraft" name="phase-of-operation-aircraft"></td>
                    </tr>
                </table>
            </fieldset>
            <fieldset>
                <legend>Details of Vehicles/Equipments, if applicable (add more column if required)</legend>
                <table border="1" id="details-of-vechicles/equipments">
                    <tr id="headerRow">
                        <th></th>
                        <th>Vehicle 1</th>
                    </tr>

                    <tr>
                        <td>Type of Vehicle/Equipment</td>
                        <td><input type="text" id="type-of-vehicle/equipment" name="type-of-vehicle/equipment-1"></td>
                    </tr>

                    <tr>
                        <td>Airside Vehicle Permit (AVP)</td>
                        <td><input type="text" id="airside-vehicle-permit" name="airside-vehicle-permit_1"></td>
                    </tr>

                    <tr>
                        <td>Equipment No.</td>
                        <td><input type="text" id="equipment-no" name="equipment-no_1"></td>
                    </tr>

                    <tr>
                        <td>Owner/Operator/GHSP</td>
                        <td><input type="text" id="owner-operator" name="owner-operator_1"></td>
                    </tr>

                    <tr>
                        <td>Phase of Operation</td>
                        <td><input type="text" id="phase-of-operation" name="phase-of-operation_1"></td>
                    </tr>
                </table><br>
                <button type="button" onclick="addVehicleColumn()"> Add Vehicle</button>
                <button type="button" class="remove-button" onclick="removeLastVehicleColumn()">Remove Vehicle</button> <!-- Remove last vehicle column -->
            </fieldset>
            <fieldset>
                <legend>1. Factual Information</legend>
                <fieldset>
                    <legend>1.1. Brief Description - A brief narrative of the incident â€”</legend>
                    <textarea id="brief-description" name="brief-description" rows="5" cols="50" required></textarea>
                    <fieldset>
                        <legend>1.1.1. Chronological summary of the incident-</legend>
                        <table id="Events-table" border="1">
                            <tr>
                                <th>Time(24 Hrs)</th>
                                <th>Description</th>
                                <th>Action</th>
                            </tr>
                            <tr>
                                <td><input type="time" name="event-time" placeholder="Time" required></td>
                                <td><textarea name="event-description" id="event-description" placeholder="Enter details..." required></textarea></td>
                                <td><button type="button" class="remove-button" onclick="removeEventRow(this)">Remove</button></td>
                            </tr>
                        </table><br>
                        <button type="button" onclick="addEventRow()">Add Event</button>
                    </fieldset>
                    <fieldset>
                        <legend>1.1.2. Action taken</legend>
                        <textarea id="action-taken" name="action-taken" rows="5" cols="50" required></textarea>
                    </fieldset>
                </fieldset>
                <fieldset>
                    <legend>1.2. Injuries to Persons</legend>
                    <table border="1" id="injuries-to-person">
                        <tr>
                            <th>Injuries</th>
                            <th>Driver/Equipment <br> Operator</th>
                            <th>Ground Staff</th>
                            <th>Others</th>
                        </tr>

                        <tr>
                            <td>Fatal</td>
                            <td><input type="text" id="injuries-fatal-driver" name="injuries-fatal-driver" required></td>
                            <td><input type="text" id="injuries-fatal-ground-staff" name="injuries-fatal-ground-staff" required></td>
                            <td><input type="text" id="injuries-fatal-other" name="injuries-fatal-other" required></td>
                        </tr>

                        <tr>
                            <td>Serious</td>
                            <td><input type="text" id="injuries-serious-driver" name="injuries-serious-driver" required></td>
                            <td><input type="text" id="injuries-serious-ground-staff" name="injuries-serious-ground-staff" required></td>
                            <td><input type="text" id="injuries-serious-other" name="injuries-serious-other" required></td>
                        </tr>

                        <tr>
                            <td>Minor/None</td>
                            <td><input type="text" id="injuries-minor-driver" name="injuries-minor-driver" required></td>
                            <td><input type="text" id="injuries-minor-ground-staff" name="injuries-minor-ground-staff" required></td>
                            <td><input type="text" id="injuries-minor-other" name="injuries-minor-other" required></td>
                        </tr>
                    </table>
                </fieldset>
                <fieldset>
                    <legend>1.3. Damage to Aircraft/Vehicle/Equipment</legend>
                    <textarea id="damage-to" name="damage-to" rows="5" cols="50" required></textarea>
                </fieldset>
                <fieldset>
                    <legend>1.4. Other Damage</legend>
                    <textarea id="other-damage" name="other-damage" rows="5" cols="50" required></textarea>
                </fieldset>
                <fieldset>
                    <legend>1.5. Personnel Information</legend>
                    <label for="personnel-information">Details of the Equipment Operator:</label>
                    <textarea id="personnel-information" name="personnel-information" rows="5" cols="50" required></textarea>
                </fieldset>
                <fieldset>
                    <legend>1.6. Equipment Information</legend>
                    <textarea id="equipment-information" name="equipment-information" rows="5" cols="50" required></textarea>
                </fieldset>
                <fieldset>
                    <legend>1.7. Metrological Information</legend>
                    <textarea id="metrological-report" name="metrological-report" rows="5" cols="50" required></textarea>
                </fieldset>
                <fieldset>
                    <legend>1.8. Aerodrome Information</legend>
                    <textarea id="aerodrome-information" name="aerodrome-information" rows="5" cols="50" required></textarea>
                </fieldset>
                <fieldset>
                    <legend>1.9. Fire</legend>
                    <textarea id="fire" name="fire" rows="5" cols="50" required></textarea>
                </fieldset>
                <fieldset>
                    <legend>1.10. Organization & Management information</legend>
                    <textarea id="organization-and-management-information" name="organization-and-management-information" rows="5" cols="50" required></textarea>
                </fieldset>
            </fieldset>
            <fieldset>
                <legend>2. Analysis</legend>
                <textarea id="analysis" name="analysis" rows="5" cols="50" required></textarea>
            </fieldset>
            <fieldset>
                <legend>3. Conclusions</legend>
                <fieldset>
                    <legend>3.1 Findings</legend>
                    <textarea id="findings" name="findings" rows="5" cols="50" required></textarea>
                </fieldset>
                <fieldset>
                    <legend>3.2 Probable Cause</legend>
                    <textarea id="probable-cause" name="probable-cause" rows="5" cols="50" required></textarea><br><br>
                    <label for="contributory-factor">Contributory Factor:</label>
                    <textarea id="contributory-factor" name="contributory-factor" rows="5" cols="50" required></textarea>
                </fieldset>
            </fieldset>
            <fieldset>
                <legend>4. Safety Recommendations</legend>
                <label for="safety-manager">Safety Manager Kannur International Airport Limited:</label>
                <textarea id="safety-manager" name="safety-manager" rows="5" cols="50" required></textarea><br><br>
                <!--<label for="COO-in-charge">Chief Operating Officer- In-charge Kannur International Airport Limited</label>
                <textarea id="COO-in-charge" name="COO-in-charge" rows="5" cols="50" required></textarea><br><br>-->
                <label for="date">Date:</label>
                <input type="date" id="date" name="date">
            </fieldset>
            <fieldset>
                <legend>5. Appendices</legend>
                <textarea id="appendices" name="appendices" rows="5" cols="50" required></textarea>
            </fieldset>
            <fieldset>
  <legend>6. Department to notify</legend>
  <select name="dpt-name" id="dpt-name" required>
      <option value="" selected>Select an Department</option>
      <option value="Incident1"></option>
      <option value="Incident2"></option>
      <option value="Incident3"></option>
      <option value="Other">Other</option>
  </select><br><br>
</fieldset>

            

            <input type="hidden" id="hidden-input" name="departments">

            <!-- Add these hidden fields inside your form before the submit button -->
<input type="hidden" id="vehicles_json" name="vehicles_json" value="[]">
<input type="hidden" id="incidents_json" name="incidents_json" value="[]">
<input type="hidden" name="airline-operator" id="airline-operator">
<input type="hidden" name="phase-of-operation-aircraft" id="phase-of-operation-aircraft-hidden">
            <button type="submit" id="submit">Submit</button>
        </form>                 
        </div>
        </main>
    </div>

    <script>
        let vehicleCount = 1;
let vehicles = []; // Array to store vehicle data
let events = []; // Array to store chronological incidents


// Option 1: Set default value via JavaScript when the DOM is loaded
document.addEventListener('DOMContentLoaded', function() {
    // Find the airport name input field and set its value
    const airportNameField = document.getElementById('name-of-airport');
    if (airportNameField) {
        airportNameField.value = "Kannur International Airport (KIAL)";
    }
});

// Option 2: You could also modify the HTML directly by changing the input element to include a value attribute:
// <input type="text" id="name-of-airport" name="name-of-airport" value="Kannur International Airport (KIAL)" required>

// Function to add a new vehicle column
function addVehicleColumn() {
    vehicleCount++;
    const table = document.getElementById('details-of-vechicles/equipments');
    const headerRow = document.getElementById('headerRow');

    // Add a new header for the vehicle
    const newHeader = document.createElement('th');
    newHeader.textContent = `Vehicle ${vehicleCount}`;
    headerRow.appendChild(newHeader);

    // Add a new column to each row in the table
    const rows = table.rows;
    for (let i = 1; i < rows.length; i++) {
        const newCell = document.createElement('td');
        const input = document.createElement('input');
        input.type = 'text';
        input.name = `${rows[i].cells[0].textContent.toLowerCase().replace(/ /g, '-')}_${vehicleCount}`;
        input.dataset.field = rows[i].cells[0].textContent.toLowerCase().replace(/ /g, '-');
        input.dataset.vehicle = vehicleCount;
        newCell.appendChild(input);
        rows[i].appendChild(newCell);
    }
    
    // Initialize the new vehicle in our array
    vehicles.push({
        vehicleNumber: vehicleCount,
        typeOfVehicle: '',
        airsideVehiclePermit: '',
        equipmentNo: '',
        ownerOperator: '',
        phaseOfOperation: ''
    });
    
    updateVehiclesJson();
}

// Function to remove the last vehicle column
function removeLastVehicleColumn() {
    if (vehicleCount > 1) {  // Check if there's more than one vehicle column
        const table = document.getElementById('details-of-vechicles/equipments');
        const headerRow = document.getElementById('headerRow');
        const rows = table.rows;

        // Remove the last header cell (last vehicle)
        headerRow.deleteCell(vehicleCount);

        // Remove the corresponding cells for each row in the table
        for (let i = 1; i < rows.length; i++) {
            rows[i].deleteCell(vehicleCount);
        }

        // Remove from our tracking array
        vehicles.pop();
        
        // Decrement the vehicle count
        vehicleCount--;
        
        updateVehiclesJson();
    }
}

// Function to add a new event row
function addEventRow() {
    const table = document.getElementById('Events-table');
    const row = table.insertRow(-1);
    const cell1 = row.insertCell(0);
    const cell2 = row.insertCell(1);
    const cell3 = row.insertCell(2);

    const timeInput = document.createElement('input');
    timeInput.type = 'time';
    timeInput.name = 'event-time';
    timeInput.placeholder = 'Time';
    timeInput.required = true;
    timeInput.onchange = updateEventsJson;
    cell1.appendChild(timeInput);

    const descInput = document.createElement('textarea');
    descInput.name = 'event-description';
    descInput.id = 'event-description';
    descInput.placeholder = 'Enter details...';
    descInput.required = true;
    descInput.onchange = updateEventsJson;
    cell2.appendChild(descInput);

    const removeBtn = document.createElement('button');
    removeBtn.type = 'button';
    removeBtn.className = 'remove-button';
    removeBtn.textContent = 'Remove';
    removeBtn.onclick = function() { removeEventRow(this); };
    cell3.appendChild(removeBtn);
    
    // Add a new empty event to our array
    events.push({
        time: '',
        description: ''
    });
    
    updateEventsJson();
}

// Function to remove an event row
function removeEventRow(button) {
    const row = button.closest('tr');
    const rowIndex = row.rowIndex - 1; // Adjust for header row
    
    // Remove from our tracking array
    events.splice(rowIndex - 1, 1); // Adjust for header row
    
    row.remove();
    updateEventsJson();
}

// Function to update the vehicles JSON hidden field
function updateVehiclesJson() {
    // Clear existing vehicles data
    vehicles = [];
    
    // Get all vehicle-related inputs
    const table = document.getElementById('details-of-vechicles/equipments');
    const rows = table.rows;
    
    // Start from 1 because first row is empty and we're 1-indexed for vehicles
    for (let v = 1; v <= vehicleCount; v++) {
        const vehicleData = {
            vehicleNumber: v,
            typeOfVehicle: '',
            airsideVehiclePermit: '',
            equipmentNo: '',
            ownerOperator: '',
            phaseOfOperation: ''
        };
        
        // For each row (starting from row 1, which is the first data row)
        for (let i = 1; i < rows.length; i++) {
            const fieldName = rows[i].cells[0].textContent.toLowerCase().replace(/ /g, '-');
            const input = rows[i].cells[v].querySelector('input');
            if (input) {
                switch(fieldName) {
                    case 'type-of-vehicle/equipment':
                        vehicleData.typeOfVehicle = input.value;
                        break;
                    case 'airside-vehicle-permit-(avp)':
                        vehicleData.airsideVehiclePermit = input.value;
                        break;
                    case 'equipment-no.':
                        vehicleData.equipmentNo = input.value;
                        break;
                    case 'owner/operator/ghsp':
                        vehicleData.ownerOperator = input.value;
                        break;
                    case 'phase-of-operation':
                        vehicleData.phaseOfOperation = input.value;
                        break;
                }
            }
        }
        
        vehicles[v-1] = vehicleData;
    }
    
    // Update the hidden field with the JSON string
    document.getElementById('vehicles_json').value = JSON.stringify(vehicles);
}

// Function to update the events JSON hidden field
function updateEventsJson() {
    // Clear existing events data
    events = [];
    
    // Get all event rows
    const table = document.getElementById('Events-table');
    const rows = table.rows;
    
    // Start from 1 to skip the header row
    for (let i = 1; i < rows.length; i++) {
        const timeInput = rows[i].cells[0].querySelector('input[type="time"]');
        const descInput = rows[i].cells[1].querySelector('textarea');
        
        if (timeInput && descInput) {
            events.push({
                time: timeInput.value,
                description: descInput.value
            });
        }
    }
    
    // Update the hidden field with the JSON string
    document.getElementById('incidents_json').value = JSON.stringify(events);
}

// Attach event listeners to all form fields to update the JSON data
document.addEventListener('DOMContentLoaded', function() {
    // Add hidden fields to the form for storing JSON data
    const form = document.querySelector('form[action="/submit-investigation"]');
    
    // Add hidden fields if they don't exist
    if (!document.getElementById('vehicles_json')) {
        const vehiclesInput = document.createElement('input');
        vehiclesInput.type = 'hidden';
        vehiclesInput.id = 'vehicles_json';
        vehiclesInput.name = 'vehicles_json';
        vehiclesInput.value = '[]';
        form.appendChild(vehiclesInput);
    }
    
    if (!document.getElementById('incidents_json')) {
        const incidentsInput = document.createElement('input');
        incidentsInput.type = 'hidden';
        incidentsInput.id = 'incidents_json';
        incidentsInput.name = 'incidents_json';
        incidentsInput.value = '[]';
        form.appendChild(incidentsInput);
    }
    
    // Add event listeners to existing vehicle inputs
    const vehicleInputs = document.querySelectorAll('#details-of-vechicles\\/equipments input');
    vehicleInputs.forEach(input => {
        input.addEventListener('change', updateVehiclesJson);
    });
    
    // Add event listeners to existing event inputs
    const eventTimeInputs = document.querySelectorAll('#Events-table input[type="time"]');
    const eventDescInputs = document.querySelectorAll('#Events-table textarea');
    
    eventTimeInputs.forEach(input => {
        input.addEventListener('change', updateEventsJson);
    });
    
    eventDescInputs.forEach(input => {
        input.addEventListener('change', updateEventsJson);
    });
    
    // Initialize the JSON data
    updateVehiclesJson();
    updateEventsJson();
    
    // Handle form submission
    form.addEventListener('submit', function(e) {
        // Update JSON data one final time before submission
        updateVehiclesJson();
        updateEventsJson();
        
        // Add airline value if it's missing
        const airlineInput = document.getElementById('airline');
        if (airlineInput && !document.querySelector('input[name="airline-operator"]')) {
            const airlineOperatorInput = document.createElement('input');
            airlineOperatorInput.type = 'hidden';
            airlineOperatorInput.name = 'airline-operator';
            airlineOperatorInput.value = airlineInput.value;
            form.appendChild(airlineOperatorInput);
        }
        
        // Add phase of operation if it's missing
        const phaseInput = document.getElementById('phase-of-operation-aircraft');
        if (phaseInput && !document.querySelector('input[name="phase-of-operation-aircraft"]')) {
            const phaseOperatorInput = document.createElement('input');
            phaseOperatorInput.type = 'hidden';
            phaseOperatorInput.name = 'phase-of-operation-aircraft';
            phaseOperatorInput.value = phaseInput.value;
            form.appendChild(phaseOperatorInput);
        }
    });
});

    function selectDepartment(element, department) {
        const selectedContainer = document.getElementById('selected-departments');
        const hiddenInput = document.getElementById('hidden-input');

        // Toggle selected class
        if (element.classList.contains('selected')) {
            element.classList.remove('selected');

            // Remove from selected departments
            const selectedDiv = document.querySelector(`.selected-department[data-department="${department}"]`);
            if (selectedDiv) selectedContainer.removeChild(selectedDiv);
        } else {
            element.classList.add('selected');

            // Add to selected departments
            const newDiv = document.createElement('div');
            newDiv.className = 'selected-department';
            newDiv.setAttribute('data-department', department);
            newDiv.innerHTML = `${department} <span onclick="removeDepartment('${department}')">âœ•</span>`;
            selectedContainer.appendChild(newDiv);
        }

        // Update hidden input value
        const selectedDepartments = Array.from(selectedContainer.children).map(
            (child) => child.getAttribute('data-department')
        );
        hiddenInput.value = selectedDepartments.join(', ');
    }

    function removeDepartment(department) {
        const dropdownItems = document.querySelectorAll('.dropdown-item');
        const selectedContainer = document.getElementById('selected-departments');
        const hiddenInput = document.getElementById('hidden-input');

        // Remove from selected departments
        const selectedDiv = document.querySelector(`.selected-department[data-department="${department}"]`);
        if (selectedDiv) selectedContainer.removeChild(selectedDiv);

        // Unselect the corresponding dropdown item
        dropdownItems.forEach((item) => {
            if (item.textContent === department) item.classList.remove('selected');
        });

        // Update hidden input value
        const selectedDepartments = Array.from(selectedContainer.children).map(
            (child) => child.getAttribute('data-department')
        );
        hiddenInput.value = selectedDepartments.join(', ');
    }

    // Close dropdown when clicking outside
    document.addEventListener('click', function (e) {
        const dropdownContainer = document.querySelector('.dropdown-container');
        if (!dropdownContainer.contains(e.target)) {
            document.getElementById('dropdown-list').style.display = 'none';
        }
    });

    // Additional script to handle form field synchronization
document.addEventListener('DOMContentLoaded', function() {
    // Sync airline field values
    const airlineField = document.getElementById('airline');
    if (airlineField) {
        airlineField.addEventListener('input', function() {
            const airlineOperator = document.getElementById('airline-operator');
            if (airlineOperator) {
                airlineOperator.value = this.value;
            }
        });
    }
    
    // Sync phase of operation field values
    const phaseField = document.getElementById('phase-of-operation-aircraft');
    if (phaseField) {
        phaseField.addEventListener('input', function() {
            const phaseHidden = document.getElementById('phase-of-operation-aircraft-hidden');
            if (phaseHidden) {
                phaseHidden.value = this.value;
            }
        });
    }
});

//load uid number
function loadUidNumbers() {
    $.ajax({
        url: "http://localhost:3000/uid_numbers",
        type: "GET",
        dataType: "json",
        success: function(data) {
            let dropdown = $("#uid-number");
            dropdown.empty(); // Clear existing options
            dropdown.append('<option value="">Select UID Number</option>');

            $.each(data, function(index, name) {
                dropdown.append(`<option value="${name}">${name}</option>`);
            });
        },
        error: function() {
            alert("Failed to load UID Numbers.");
        }
    });
}

$(document).ready(function() {
    loadUidNumbers();

    // Ensure the form properly detects the selected value before submission
    $("form").on("submit", function(e) {
        let selectedValue = $("#uid-number").val();
        console.log("Selected UID Number:", selectedValue); // Debugging

        if (!selectedValue) {
            alert("Please select an UID Number  from the list.");
            e.preventDefault(); // Stop form submission
        }
    });
});

// Refresh dropdown every 5 seconds to get newly added incidents
// setInterval(loadIncidentTypes, 5000);



//load department names
function loadDepartmentNames() {
    $.ajax({
        url: "http://localhost:3000/department_names",
        type: "GET",
        dataType: "json",
        success: function(data) {
            let dropdown = $("#dpt-name");
            dropdown.empty(); // Clear existing options
            dropdown.append('<option value="">Select Department</option>');

            $.each(data, function(index, name) {
                dropdown.append(`<option value="${name}">${name}</option>`);
            });
        },
        error: function() {
            alert("Failed to load Department Names.");
        }
    });
}

$(document).ready(function() {
    loadDepartmentNames();

    // Ensure the form properly detects the selected value before submission
    $("form").on("submit", function(e) {
        let selectedValue = $("#dpt-name").val();
        console.log("Selected Department:", selectedValue); // Debugging

        if (!selectedValue) {
            alert("Please select an Department  from the list.");
            e.preventDefault(); // Stop form submission
        }
    });
});


    </script>
</body>
</html>
